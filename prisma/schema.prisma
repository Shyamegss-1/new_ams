generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String?
  username           String?              @unique
  email              String?              @unique
  emailVerified      DateTime?
  password           String
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  role               Role                 @relation(fields: [roleId], references: [id])
  roleId             Int
  Account            Account?
  Authenticator      Authenticator[]
  Session            Session[]
  Subscription       Subscription?        @relation(fields: [subscriptionId], references: [id])
  subscriptionId     Int?
  UserMenuPermission UserMenuPermission[]
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subscription {
  id           Int                       @id @default(autoincrement())
  name         String
  price        Decimal
  duration     Int
  features     Json
  users        User[]
  menuMappings SubscriptionMenuMapping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id              Int                       @id @default(autoincrement())
  name            String
  url             String
  parentId        Int?
  parent          Menu?                     @relation("MenuHierarchy", fields: [parentId], references: [id])
  children        Menu[]                    @relation("MenuHierarchy")
  order           Int
  icon            String?
  menuMappings    SubscriptionMenuMapping[]
  userPermissions UserMenuPermission[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  MenuItemRole MenuItemRole[]
}

model SubscriptionMenuMapping {
  id             Int          @id @default(autoincrement())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  menu           Menu         @relation(fields: [menuId], references: [id])
  menuId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserMenuPermission {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  menu       Menu         @relation(fields: [menuId], references: [id])
  menuId     Int
  permission Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id                   Int                 @id @default(autoincrement())
  value                String
  name                 String
  UserMenuPermission   UserMenuPermission? @relation(fields: [userMenuPermissionId], references: [id])
  userMenuPermissionId Int?
}

model Role {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  menuItems   MenuItemRole[]
  User        User[]
}

model MenuItemRole {
  id         Int  @id @default(autoincrement())
  role       Role @relation(fields: [roleId], references: [id])
  roleId     Int
  menuItem   Menu @relation(fields: [menuItemId], references: [id])
  menuItemId Int

  @@unique([menuItemId, roleId])
}
